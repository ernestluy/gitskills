git init
git status
git add <file>
git commit -m “注释”
git log  (git log -pretty==online)
git reset —-hard commit_id(HEAD^/ba09e4bd) //回退到上一个版本
cat <file>//查看文件当前版本的修改信息
git reflog //查看历史提交的命令
git checkout -- file
git diff <file> // 比较当前文件和暂存区文件差异 git diff

//与远程库有关
git remote add origin https://github.com/ernestluy/testGit.git  //要关联一个远程库
git push -u origin master //第一次推送master分支的所有内容
git push origin master //本地master分支的最新修改推送至GitHub
git clone git@github.com:ernestluy/gitskills.git  //远程库已经准备好了，下一步是用命令git clone克隆一个本地库

git checkout -b dev origin/dev  //要在dev分支上开发，就必须创建远程origin的dev分支到本地
git branch --set-upstream dev origin/dev //指定本地dev分支与远程origin/dev分支的链接

git pull  // update 更新本地分支

/—————————分支————————/
git checkout -b dev //创建dev分支，然后切换到dev分支 。相当于以下两条命令

git branch dev   //创建dev分支
$ git checkout dev  //切换到dev分支
//——————————
git branch //列出所有分支，当前分支前面会标一个*号
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


git log --graph命令可以看到分支合并图

/—————————保存现场————————/
git stash
git stash list //现场列表
1)git stash pop //恢复的同时把stash内容也删了

2)git stash apply stash@{0} //恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
/——————————/
 
/—————————标签————————/
git tag <name>就可以打一个新标签
git tag查看所有标签
